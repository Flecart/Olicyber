#! /usr/bin/env python3

cifr = bytes.fromhex('bebafecaefbeadde')
print(cifr)
target = bytes.fromhex('613d9554f622db60bdf86c1fd986743d70f80816d9616555e88c161da708640c7e1f2a289b3abd4ef85dae164114bd0a')
print(target)
print(len(target))

p_box = [0, 4, 6, 2, 5, 1, 3, 7]
s_box = [99, 124, 119, 123, 242, 107, 111, 197, 48, 1, 103, 43, 254, 215, 171, 118, 202, 130, 201, 125, 250, 89, 71, 240, 173, 212, 162, 175, 156, 164, 114, 192, 183, 253, 147, 38, 54, 63, 247, 204, 52, 165, 229, 241, 113, 216, 49, 21, 4, 199, 35, 195, 24, 150, 5, 154, 7, 18, 128, 226, 235, 39, 178, 117, 9, 131, 44, 26, 27, 110, 90, 160, 82, 59, 214, 179, 41, 227, 47, 132, 83, 209, 0, 237, 32, 252, 177, 91, 106, 203, 190, 57, 74, 76, 88, 207, 208, 239, 170, 251, 67, 77, 51, 133, 69, 249, 2, 127, 80, 60, 159, 168, 81, 163, 64, 143, 146, 157, 56, 245, 188, 182, 218, 33, 16, 255, 243, 210, 205, 12, 19, 236, 95, 151, 68, 23, 196, 167, 126, 61, 100, 93, 25, 115, 96, 129, 79, 220, 34, 42, 144, 136, 70, 238, 184, 20, 222, 94, 11, 219, 224, 50, 58, 10, 73, 6, 36, 92, 194, 211, 172, 98, 145, 149, 228, 121, 231, 200, 55, 109, 141, 213, 78, 169, 108, 86, 244, 234, 101, 122, 174, 8, 186, 120, 37, 46, 28, 166, 180, 198, 232, 221, 116, 31, 75, 189, 139, 138, 112, 62, 181, 102, 72, 3, 246, 14, 97, 53, 87, 185, 134, 193, 29, 158, 225, 248, 152, 17, 105, 217, 142, 148, 155, 30, 135, 233, 206, 85, 40, 223, 140, 161, 137, 13, 191, 230, 66, 104, 65, 153, 45, 15, 176, 84, 187, 22]

def permutation(block, box=p_box):
    ans = [0]*8
    for i in range(8):
        ans[box[i]] = block[i]
    return ans
    
ip_box = [0, 5, 3, 6, 1, 4, 2, 7]



def substitution(block, box=s_box):
    ans = [0] * 8
    for i in range(8):
        ans[i] = box[block[i]]
    return ans

def xor(a,b):
	return bytes([x ^ y  for x,y in zip(a,b)])

is_box = [82, 9, 106, 213, 48, 54, 165, 56, 191, 64, 163, 158, 129, 243, 215, 251, 124, 227, 57, 130, 155, 47, 255, 135, 52, 142, 67, 68, 196, 222, 233, 203, 84, 123, 148, 50, 166, 194, 35, 61, 238, 76, 149, 11, 66, 250, 195, 78, 8, 46, 161, 102, 40, 217, 36, 178, 118, 91, 162, 73, 109, 139, 209, 37, 114, 248, 246, 100, 134, 104, 152, 22, 212, 164, 92, 204, 93, 101, 182, 146, 108, 112, 72, 80, 253, 237, 185, 218, 94, 21, 70, 87, 167, 141, 157, 132, 144, 216, 171, 0, 140, 188, 211, 10, 247, 228, 88, 5, 184, 179, 69, 6, 208, 44, 30, 143, 202, 63, 15, 2, 193, 175, 189, 3, 1, 19, 138, 107, 58, 145, 17, 65, 79, 103, 220, 234, 151, 242, 207, 206, 240, 180, 230, 115, 150, 172, 116, 34, 231, 173, 53, 133, 226, 249, 55, 232, 28, 117, 223, 110, 71, 241, 26, 113, 29, 41, 197, 137, 111, 183, 98, 14, 170, 24, 190, 27, 252, 86, 62, 75, 198, 210, 121, 32, 154, 219, 192, 254, 120, 205, 90, 244, 31, 221, 168, 51, 136, 7, 199, 49, 177, 18, 16, 89, 39, 128, 236, 95, 96, 81, 127, 169, 25, 181, 74, 13, 45, 229, 122, 159, 147, 201, 156, 239, 160, 224, 59, 77, 174, 42, 245, 176, 200, 235, 187, 60, 131, 83, 153, 97, 23, 43, 4, 126, 186, 119, 214, 38, 225, 105, 20, 99, 85, 33, 12, 125]
# region creo inverse substitution box
# is_box = [0] * 256

# for i in range(256):
#     is_box[s_box[i]] = i
# print(is_box)




# print(substitution(is_box), 'substitution')
# print(permutation([x for x in range(8)], ip_box), 'permutation')
# # region provo a cifrare
# inp = b"A"*8

# # xo = int(inp.hex(), 16) ^ cifr
# xo = xor(cifr, inp)
# out = bytes.fromhex(xo.hex())
# print(out, 'dopo xor')
# out = permutation(out)
# print(b"".join([bytes([i]) for i in out]), 'dopo perm')
# out = substitution(out, s_box)
# out = b"".join([bytes([i]) for i in out]).hex()
# print(out, 'finale')
# endregion

# region fuck
password = b''

for x in range(0,48,8):
    print(x)
    target_bytes = int(target[x:x+8].hex(),16)
    target_bytes = target[x:x+8]
    # target_bytes = bytes.fromhex('16163dce0fe408db')
    target_bytes = substitution(target_bytes, is_box)
    target_bytes = permutation(target_bytes, ip_box)
    # print(target_bytes)
    target_bytes =  b"".join([bytes([i]) for i in target_bytes])
    out = xor(cifr,target_bytes)
    try:
        out = bytes.fromhex((out).hex())
    except:
        out = bytes.fromhex("0" + (out).hex())

    # flag{5PNs_4r3_fUn_Bu7_R3v3r5PNs_4R3_MuCh_B3tt3R}
    
    # print(out)

    password += out

print(password)
print(len(password))

# region &DAT_001040a0
# strangeMemory = bytes.fromhex('0000000004000000060000000200000005000000010000000300000007000000')

# strangeMemoryArray = []
# for i in range(0,len(strangeMemory)-1,4):
#     tmp = strangeMemory[i:i+4][::-1].hex() # little endian
#     print(tmp)
#     tmp = int((tmp),16)
#     strangeMemoryArray.append(tmp)

# print(strangeMemoryArray)
# endregion

# region &DAT_001040c0
# strangeMemory = bytes.fromhex('630000007c000000770000007b000000f20000006b0000006f000000c50000003000000001000000670000002b000000fe000000d7000000ab00000076000000ca00000082000000c90000007d000000fa0000005900000047000000f0000000ad000000d4000000a2000000af0000009c000000a400000072000000c0000000b7000000fd0000009300000026000000360000003f000000f7000000cc00000034000000a5000000e5000000f100000071000000d8000000310000001500000004000000c700000023000000c30000001800000096000000050000009a000000070000001200000080000000e2000000eb00000027000000b20000007500000009000000830000002c0000001a0000001b0000006e0000005a000000a0000000520000003b000000d6000000b300000029000000e30000002f0000008400000053000000d100000000000000ed00000020000000fc000000b10000005b0000006a000000cb000000be000000390000004a0000004c00000058000000cf000000d0000000ef000000aa000000fb000000430000004d000000330000008500000045000000f9000000020000007f000000500000003c0000009f000000a800000051000000a3000000400000008f000000920000009d00000038000000f5000000bc000000b6000000da0000002100000010000000ff000000f3000000d2000000cd0000000c00000013000000ec0000005f000000970000004400000017000000c4000000a70000007e0000003d000000640000005d000000190000007300000060000000810000004f000000dc000000220000002a000000900000008800000046000000ee000000b800000014000000de0000005e0000000b000000db000000e0000000320000003a0000000a0000004900000006000000240000005c000000c2000000d3000000ac000000620000009100000095000000e400000079000000e7000000c8000000370000006d0000008d000000d50000004e000000a90000006c00000056000000f4000000ea000000650000007a000000ae00000008000000ba00000078000000250000002e0000001c000000a6000000b4000000c6000000e8000000dd000000740000001f0000004b000000bd0000008b0000008a000000700000003e000000b5000000660000004800000003000000f60000000e000000610000003500000057000000b900000086000000c10000001d0000009e000000e1000000f8000000980000001100000069000000d90000008e000000940000009b0000001e00000087000000e9000000ce0000005500000028000000df0000008c000000a1000000890000000d000000bf000000e6000000420000006800000041000000990000002d0000000f000000b000000054000000bb00000016000000')
# strangeMemoryArray = []
# for i in range(0,len(strangeMemory)-1,4):
#     tmp = strangeMemory[i:i+4][::-1].hex() # little endian
#     # print(tmp)
#     tmp = int((tmp),16)
#     strangeMemoryArray.append(tmp)

# print(strangeMemoryArray)
# endregion