#! /usr/bin/env python3

from sympy.ntheory import discrete_log
from pwn import remote #pip install pwntools
from hashlib import sha256

p = 0x83f39daf527c6cf6360999dc47c4f0944ca1a67858a11bd915ee337f8897f36eff98355d7c35c2accdf4555b03a9552b4bf400915320ccd0ba60b0cb7fcad723 ** 1000
g = 0x15a5f7dec38869e064dd933e23c64f785492854fbe8a6e919d991472ec68edf035eef8c15660d1f059ca1600ee99c7f91a760817d7a3619a3e93dd0162f7474bbf

def solvepow(p, n):
    s = p.recvline()
    starting = s.split(b'with ')[1][:10].decode()
    s1 = s.split(b'in ')[-1][:n]
    i = 0
    print("Solving PoW...")
    while True:
        if sha256((starting+str(i)).encode('ascii')).hexdigest()[-n:] == s1.decode():
            print("Solved!")
            p.sendline(starting + str(i))
            break
        i += 1

def exploit(conn):
    y = int(conn.recvline().strip().decode(),16)

    print(p)
    x = discrete_log(p, y, g)

    conn.sendline(hex(x))
    conn.interactive()

if __name__ == '__main__':
    p = remote('challs.m0lecon.it', 6428)
    solvepow(p, n = 6)
    exploit(p)
